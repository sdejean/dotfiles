#!/bin/bash
reponame=$(basename $(pwd))
tstamp=$(date +%Y%m%d%H%M%S)

# check that we are within the git repo
if [[ -d .git ]]; then
    CWD=$(pwd)
elif [[ -d $(git rev-parse --git-dir 2>/dev/null) ]]; then
    CWD=$(pwd)
fi

if [[ -z ${CWD} ]]; then
    echo "Must run ${0} from dotfiles working directory"
    exit 1
fi

############################# SCAFFOLDING ######################################
# test for the git command
git=$(which git)
if [[ $? -ne 0 ]]; then
    echo "${0} needs the git command to run"
    exit 1
fi

# set backup dir
BACKUP=${HOME}/.${reponame}-backup
if [[ ! -d ${BACKUP} ]]; then
    echo "Creating backup dir: ${BACKUP}"
    mkdir -pv ${BACKUP}
    if [[ $? -ne 0 ]]; then
        echo "Error, could not create backup dir"
        exit 1
    fi
fi

# set opt dir
OPT=${HOME}/opt
if [[ ! -d ${OPT} ]]; then
    echo "Creating opt dir: ${OPT}"
    mkdir -pv ${OPT}
    if [[ $? -ne 0 ]]; then
        echo "Error, could not create opt dir"
        exit 1
    fi
fi

################################ CONFIG ########################################
echo "Copying .${CONFDIR} files to ${HOME}/.${CONFDIR}"
CONFDIR=config
if [[ ! -d ${BACKUP}/${CONFDIR} ]]; then
    mkdir -v ${BACKUP}/${CONFDIR}.${reponame}-${tstamp}
fi

for dir in $(find ${CWD}/${CONFDIR} -mindepth 1 -maxdepth 1 -type d); do
    dir=$(basename ${dir})
    echo ${dir}
    echo mv -v ${HOME}/.${CONFDIR}/${dir} ${BACKUP}/${CONFDIR}.${reponame}-${tstamp}/${dir}
    cp -rv ${CWD}/${CONFDIR}/${dir} ${HOME}/.${CONFDIR}/
done
exit 0

################################# BASH #########################################
echo "Copying bash dotfiles to ${HOME}"
dotfiles="bashrc bash_aliases bash_profile profile"
for file in ${dotfiles};
do
    if [[ -f ${CWD}/${file} ]]; then
        if [[ -f ${HOME}/.${file} ]]; then
            mv -v ${HOME}/.${file} ${BACKUP}/.${file}.${reponame}-${tstamp}
        fi
        cp -v ${CWD}/${file} ${HOME}/.${file}
    fi
done

############################## SUBMODULES ######################################
sub_status=$(git submodule status |grep -v -)

# Initialize top-level modules
if [[ $? -ne 0 ]]; then
    echo "Initializing and updating submodules"
    git submodule init && git submodule update
    if [[ $? -ne 0 ]]; then
        echo "Error initializing submodules"
        exit 1
    fi
fi

for sub in $(git submodule | awk '{ print $2 }'); do
    echo "Initializing and updating the submodules FOR submodule '${sub}'"
    cd ${CWD}/${sub}
    git submodule init && git submodule update
    cd .. 

    echo "Linking submodule '${sub}'"
    link=${OPT}/${sub}
    if [[ -L ${link} ]]; then
        echo "    Removing link for submodule: ${sub}"
        rm -v ${link}
    fi
    ln --symbolic --verbose ${CWD}/${sub} ${link}
    if [[ $? -ne 0 ]]; then
        echo "Error linking submodule: ${sub}"
        exit 1
    fi
done

################################## VIM #########################################
dotfiles="vim vimrc"
for file in ${dotfiles};
do
        if [[ -f ${HOME}/.${file} || -d ${HOME}/.${file} ]]; then
            mv -v ${HOME}/.${file} ${BACKUP}/.${file}.${reponame}-${tstamp}
        fi

        ##  Special case for vimrc:
        #   vimrc has been broken up into several different files based on 
        #   installed plugins, any new plugins that should be referenced in 
        #   vimrc should be added to its own config file and "cat"-ed here.
        if [[ ${file} == 'vimrc' && -f ${CWD}/vimrc-base ]]; then
            echo "Writing out file: '${HOME}/.${file}'" 
            cat \
                ${CWD}/vimrc-base \
                ${CWD}/vimrc-ext-pathogen   \
                ${CWD}/vimrc-ext-solarized  \
                ${CWD}/vimrc-ext-powerline  \
                > ${HOME}/.${file}
        else
            if [[ -f ${CWD}/${file} || -d ${CWD}/${file} ]]; then
                echo "Deploying file '${CWD}/${file}' to '${HOME}/.${file}'"
                cp -rv ${CWD}/${file} ${HOME}/.${file}
            fi
        fi
done

if [[ ! -d ${HOME}/.vim/bundle ]]; then
    mkdir -v ${HOME}/.vim/bundle
fi

# add solarized to pathogens path
if [[ -d ${OPT}/solarized/vim-colors-solarized && -d ${HOME}/.vim/bundle ]]; then
    ln --symbolic --verbose ${OPT}/solarized/vim-colors-solarized ${HOME}/.vim/bundle/
fi

if [[ -d ${OPT}/powerline/powerline/bindings/vim && -d ${HOME}/.vim/bundle ]]; then
    ln --symbolic --verbose ${OPT}/powerline/powerline/bindings/vim ${HOME}/.vim/bundle/vim-powerline
fi

################################# TMUX #########################################


